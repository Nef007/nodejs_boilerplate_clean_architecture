import { generateToken } from '{{ROOT_RELATIVE_PATH}}/lib/use-cases/utils/jwtUtils.mjs';
import { getDirName }    from '{{ROOT_RELATIVE_PATH}}/lib/utils/index.mjs';
import Tester            from '{{TESTER_RELATIVE_PATH}}';

const tester = new Tester();

const dirname = getDirName(import.meta.url);

function requestBuilder({{MODEL_NAME_toLC}}Id, token) {
    return {
        method  : 'GET',
        url     : `/api/v1/{{NAMESPACED_MODEL_NAME}}/${{{MODEL_NAME_toLC}}Id}`,
        headers : {
            'Authorization' :  `Bearer ${token}`
        }
    };
}

tester.setupTestsWithTransactions(`${dirname}/{{FIXTURES_RELATIVE_PATH}}/positive`,
    '{{NAMESPACED_MODEL_NAME}}-show/positive',
    async ({ config: { before }, expected }) => {
        const { {{MODEL_NAME_toLC}}Id, {{ACTOR_toLC}}Id } = await before(tester.factory);
        const accessToken = generateToken({ id: {{ACTOR_toLC}}Id });

        await tester.testUseCasePositive({
            requestBuilder : () => requestBuilder({{MODEL_NAME_toLC}}Id, accessToken.accessToken),
            expected
        });
    }
);

tester.setupTestsWithTransactions(`${dirname}/{{FIXTURES_RELATIVE_PATH}}/negative`,
    '{{NAMESPACED_MODEL_NAME}}-show/negative',
    async ({ config: { before }, input, exception }) => {
        const { {{ACTOR_toLC}}Id } = await before(tester.factory);
        const accessToken = generateToken({ id: {{ACTOR_toLC}}Id });

        await tester.testUseCaseNegative({
            requestBuilder : () => requestBuilder(input.id, accessToken.accessToken),
            input,
            exception
        });
    }
);
